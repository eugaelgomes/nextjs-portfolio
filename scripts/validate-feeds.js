/**
 * Script para validar e testar os feeds RSS/JSON
 * Execute com: npm run validate-feeds
 */

const validateFeeds = async () => {
  const baseUrl = process.env.NODE_ENV === 'production' 
    ? 'https://gaelgomes.dev' 
    : 'http://localhost:3000'
  
  console.log('üîç Validando feeds...\n')
  
  // Testa RSS Feed
  try {
    const rssResponse = await fetch(`${baseUrl}/rss.xml`)
    if (rssResponse.ok) {
      const rssContent = await rssResponse.text()
      console.log('‚úÖ RSS Feed est√° funcionando')
      console.log(`   URL: ${baseUrl}/rss.xml`)
      console.log(`   Tamanho: ${(rssContent.length / 1024).toFixed(2)} KB`)
      
      // Verifica se √© XML v√°lido
      if (rssContent.includes('<rss') && rssContent.includes('</rss>')) {
        console.log('‚úÖ XML v√°lido')
      } else {
        console.log('‚ùå XML inv√°lido')
      }
    } else {
      console.log('‚ùå RSS Feed n√£o est√° acess√≠vel')
    }
  } catch (error) {
    console.log('‚ùå Erro ao acessar RSS Feed:', error)
  }
  
  console.log()
  
  // Testa JSON Feed
  try {
    const jsonResponse = await fetch(`${baseUrl}/feed.json`)
    if (jsonResponse.ok) {
      const jsonContent = await jsonResponse.json()
      console.log('‚úÖ JSON Feed est√° funcionando')
      console.log(`   URL: ${baseUrl}/feed.json`)
      console.log(`   Items: ${jsonContent.items?.length || 0}`)
      console.log(`   Vers√£o: ${jsonContent.version}`)
      
      // Verifica estrutura
      if (jsonContent.version && jsonContent.title && jsonContent.items) {
        console.log('‚úÖ Estrutura JSON Feed v√°lida')
      } else {
        console.log('‚ùå Estrutura JSON Feed inv√°lida')
      }
    } else {
      console.log('‚ùå JSON Feed n√£o est√° acess√≠vel')
    }
  } catch (error) {
    console.log('‚ùå Erro ao acessar JSON Feed:', error)
  }
  
  console.log()
  
  // Testa Sitemap
  try {
    const sitemapResponse = await fetch(`${baseUrl}/sitemap.xml`)
    if (sitemapResponse.ok) {
      const sitemapContent = await sitemapResponse.text()
      console.log('‚úÖ Sitemap est√° funcionando')
      console.log(`   URL: ${baseUrl}/sitemap.xml`)
      
      // Conta URLs
      const urlCount = (sitemapContent.match(/<loc>/g) || []).length
      console.log(`   URLs: ${urlCount}`)
      
      if (sitemapContent.includes('<urlset') && sitemapContent.includes('</urlset>')) {
        console.log('‚úÖ Sitemap XML v√°lido')
      } else {
        console.log('‚ùå Sitemap XML inv√°lido')
      }
    } else {
      console.log('‚ùå Sitemap n√£o est√° acess√≠vel')
    }
  } catch (error) {
    console.log('‚ùå Erro ao acessar Sitemap:', error)
  }
  
  console.log()
  
  // Testa Robots.txt
  try {
    const robotsResponse = await fetch(`${baseUrl}/robots.txt`)
    if (robotsResponse.ok) {
      const robotsContent = await robotsResponse.text()
      console.log('‚úÖ Robots.txt est√° funcionando')
      console.log(`   URL: ${baseUrl}/robots.txt`)
      
      if (robotsContent.includes('Sitemap:')) {
        console.log('‚úÖ Sitemap referenciado no robots.txt')
      } else {
        console.log('‚ö†Ô∏è  Sitemap n√£o referenciado no robots.txt')
      }
    } else {
      console.log('‚ùå Robots.txt n√£o est√° acess√≠vel')
    }
  } catch (error) {
    console.log('‚ùå Erro ao acessar Robots.txt:', error)
  }
  
  console.log('\nüéâ Valida√ß√£o conclu√≠da!')
}

// Executa apenas se chamado diretamente
if (require.main === module) {
  validateFeeds()
}

module.exports = { validateFeeds }